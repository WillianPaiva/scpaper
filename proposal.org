* crosscutting concerns
** what is it
** options to deal with it
      - TemplateMetaprogramming, augmented with PolicyObjects (such as StandardTemplateLibrary allocators)
      - MetaObjectProtocols, in particular things like before functions, after functions, etc.
      - Decorators (both DecoratorPattern and the language feature in Java), delegation in general.
      - TemplateMethodPattern (i.e. use of HookMethods)
      - RPC tools
      - Many of the CreationalPatterns can be used to allow variation of some cross-cutting concern at runtime.
      - MultipleInheritance and MixIns
      - ContextObject or ExplicitManagementOfImplicitContext
      - A programming paradigm dealing with this stuff is AspectOrientedProgramming.

      bad example of dealing:
      - GrandCentralStation (aggregating lots of independent domain functionality into a BigBallOfMud just so the CrossCuttingConcern(s) can be dealt with in one place).

* context-oriented aproach
** pros
** cons
** public acceptance
* aspect-oriented vs context-oriencted
** pros
** cons
** public acceptance
* feature-oriented vs context-oriented
** pros
** cons
** public acceptance
* develop the soldier app in contextJ
** compare with the solution made in class 
** pros 
** cons
