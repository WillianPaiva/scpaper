#+TITLE: Context-Oriented Programming 
#+AUTHOR: Willian Paiva & Nathalie Craeye
#+OPTIONS: H:2 toc:t num:t
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+LaTeX_HEADER: \usepackage[version=3]{mhchem}
#+LaTeX_HEADER: \usepackage{minted}
#+BEAMER_THEME: Madrid
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)
     
* Introduction to Context-Oriented Programming 

** The objective 
 
*** Simplification and control                                      :B_block:
    :PROPERTIES:
    :BEAMER_ENV: block
    :END:
    - Make it simpler to take the context in consideration.
    - Better control over the method selection.
    - Well define the entities.
    - Tackle /crosscutting-concerns/.



** Context and behavior variants
   COP subdivides the Context into 3 categories:
*** Actor 
    Ex: Function or methods call, messages ...
*** Environment 
    Ex: GPS, battery, light sensor ... 
*** System 
    Ex: Methods, objects, subsystems ...


** Multi-dimensional message dispatch

*** one dimension (Procedural programming)  
    [[./one.jpg]]

** Multi-dimensional message dispatch

*** two dimension (Object-oriented programming) 
    [[./two.png]]


** Multi-dimensional message dispatch

*** three dimension (Subject-oriented programming) 
    [[./three.png]]


** Layers
*** Definitions
   + First-class entities
   + Activation and deactivation
     - Arbitrary parts of the code
     - Conditional (environment) 
   + Scope
     - executes the code on the scope in or out the layer

** Multi-dimensional message dispatch

*** four dimension (Context-oriented programming)
    #+BEGIN_SRC java
    class Calculate{
        Calculate(){};
        Void HeavyCalc(){ someHeavyCalc();}
        Layer batWarning {
            void HeavyCalc(){
                sendNotification(" Warning Low Battery level");
                proceed();
            }
        }
        Layer lowMemory {
            void HeavyCalc(){
                sendNotification("Not enough memory to execute");
                throw new NotEnoughtMemoryException();
            }
        }
    }
    #+END_SRC


** Multi-dimensional message dispatch

*** four dimension  cont...
    #+BEGIN_SRC java
    Calculate c = new Calculate();
    if(SystemMemory() < mimMem){
        with(lowMemory){
            c.HeavyCalc();
        }
    }else if(BatteryLevel() < mimBat){
        with(batWarning){
            c.HeavyCalc();
        }
    }else{
        c.HeavyCalc();
    }
    #+END_SRC

* Related Solutions

** Decorator pattern

*** Common intents                                      :B_block:
    :PROPERTIES:
    :BEAMER_ENV: block
    :END:

    - Can withdrawn responsibilities.(???)
    - Add behavior or state to individual objects at run-time.

*** Cons                                                            :B_block:
    :PROPERTIES:
    :BEAMER_ENV: block
    :END:
    
    - With COP it is possible to activate and deactivate layers with a simpler syntax.

*** Pros                                                            :B_block:
    :PROPERTIES:
    :BEAMER_ENV: block
    :END:
    - By using the decorator pattern a class don't need to know/declare future /"decorations"/.



** Aspect-oriented programming

*** Advantages over COP                                             :B_block:
    :PROPERTIES:
    :BEAMER_ENV: block
    :END:
    - Decrease code scattering by a static way of programming.
    - The class has no knowledge of the aspects. 
    - Provides similar functionalities with (/pointcut/, /after/ and /before/).
    - Integrated in many more languages like Java and C++.

** Q&A 
  [[./qa.jpg]] 
